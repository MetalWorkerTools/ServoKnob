; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32C3_V01

[env]
platform = espressif32
framework = arduino
; upload_protocol = esp-builtin
upload_protocol = esptool
debug_tool = esp-builtin
; debug_init_break = tbreak loop					#do not break at program start
monitor_speed = 115200
lib_deps = 
	olikraus/U8g2@^2.35.19
	igorantolic/Ai Esp32 Rotary Encoder@^1.7
platform_packages =	
	framework-arduinoespressif32@https://github.com/espressif/arduino-esp32.git#2.0.7

[hardware_V01]								#hardware version 02
board = lolin_c3_mini
build_flags = 
	-D SDA_PIN=3							#the IO pin for the i2c OLED controller SDA pin
	-D SCL_PIN=4							#the IO pin for the i2c OLED controller SCL pin

	-D LED_GPIO=8							#the output pin for the (onboard) LED signal
	-D LED_ACTIVE=0							#the level that is considered active
	-D NO_RGB								#define for boards that have no RGB led or use the RGB pin as common output

	-D SERVO_GPIO=10						#the output pin for the servo signal output
	-D SERVO_ACTIVE=1						#the level that is considered active

	-D PWM_GPIO=7							#the output pin for the PWM signal input
	-D PWM_ACTIVE=0					        #the level that is considered active

	-D ROTARY_SW_GPIO=2						#the input pin for the rotary encoder button
	-D ROTARY_A_GPIO=1						#the input pin for the rotary encoder A signal
	-D ROTARY_B_GPIO=0						#the input pin for the rotary encoder B signal
	-D ROTARY_ACTIVE=0						#the level that is considered active
	-D ROTARY_STEPS=4						#for most rotary encoders there are 4 levels per tic (quadrature encoder)
	-D ROTARY_VCC_P=-1						#set it to the IO pin that should deliver the rotary VCC in stead of processor VCC

[default_rotary_settings]
build_flags = 
	-D ROTARY_ACCELERATION_MODE_RUN=200		#the higher this value, the larger the steps/tic when turning the knob fast during run time
	-D ROTARY_ACCELERATION_MODE_SETUP=100	#the higher this value, the larger the steps/tic when turning the knob fast during setup
	-D ROTARY_DEBOUNCE_TIME=100				#the minumum duration of the button pin signal to stable (debounce)

[default_debounce_settings]
build_flags =
	-D SERVO_DEBOUNCE_TIME=1000				#the minimum duration of the mist pin signal to be stable (debounce)
	-D PWM_DEBOUNCE_TIME=1000				#the minimum duration of the mist pin signal to be stable (debounce)

[default_servo_settings]
build_flags =
	; -D SERVOFREQUENCY=200					#servo library on ESP32-C3 requires minimal frequentie of 200 HZ
	-D SERVO_ANGLE_MIN=00					#the minium rotation angle of the servo (must match the potmeter and servo)
	-D SERVO_ANGLE_MAX=180					#the maxium rotation angle of the servo (must match the potmeter and servo)
	-D SERVO_DEACTIVATE_DELAY=5000			#the ms delay to give the servo motor time to reach the last set position before completetely shutting off
	-D SERVO_DEAD_BAND_MIN=1				#the minimum difference between current position and requested position before position will be adjusted to avoid resonance
	-D SERVO_DEAD_BAND_MAX=25				#the maximum difference between current position and requested position before position will be adjusted to avoid resonance

[default_rpm_settings]
build_flags =
	-D RPM_MIN=0							#the minimum motor RPM
	-D RPM_MAX=5000							#the maximum motor RPM
	-D RPM_STEP=50							#the step size for RPM changes

[env:esp32C3_V01]
board =${hardware_V01.board}
build_flags = 
	${hardware_V01.build_flags}
	${default_rotary_settings.build_flags}
	${default_debounce_settings.build_flags}
	${default_servo_settings.build_flags}
	${default_rpm_settings.build_flags}
	; -D DEBUG

[env:esp32C3_V01_debug]
board =${env:esp32C3_V01.board}	#Use the default board
build_flags = 
 	${env:esp32C3_V01.build_flags}	#Use the default build flags
upload_protocol = esp-builtin	#Change the upload protocol
	; -D DEBUG

